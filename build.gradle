import com.camptocamp.gradle.*

group = 'org.mapfish.print'
version = '1.2-SNAPSHOT'

usePlugin 'java'
usePlugin 'war'
usePlugin 'jetty'
usePlugin 'eclipse'
usePlugin 'maven'
usePlugin ByteCodeQuality
usePlugin Cobertura

defaultTasks 'jar', 'war', 'standalone'

repositories {
  mavenCentral()
  mavenRepo urls: 'http://dev.mapfish.org/maven/repository'
}

configurations {
    deployerJars
    compile.transitive = true
    deployerJars.transitive = true
}

dependencies {  
  compile ('com.lowagie:itext:2.1.5', 'xerces:xercesImpl:2.4.0', 'org.json:json:20080701', 'org.jyaml:jyaml:1.3',
           'ch.thus:pvalsecc:0.9.2', 'xalan:xalan:2.7.0', 'log4j:log4j:1.2.14', 'com.vividsolutions:jts:1.8',
           "org.mapfish.geo:mapfish-geo-lib:$version", 'commons-httpclient:commons-httpclient:3.1')
  compile ('org.apache.xmlgraphics:batik-transcoder:1.7'){
    exclude module: 'fop'
  }
  providedCompile 'javax.servlet:servlet-api:2.5'
  testCompile 'junit:junit:4.7'
  
  deployerJars "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
}

manifest.mainAttributes('Main-Class':'org.mapfish.print.ShellMapPrinter')

sourceCompatibility = 1.5
targetCompatibility = 1.5

jar {
  enabled = true
  baseName = "print-lib"
}

war {
  baseName = "print-servlet"
}

task standalone (dependsOn: compileJava, type: Jar) {
  baseName = "print-standalone"

  fileSet {
    sourceSets.main.classes.asFileTree.matching {include '**/*.class'}
  }
  for(file in configurations.compile.resolve()) {
    merge(file)
  }
  
  doLast {
    def dest = "$buildDir/.standalone"
    ant.delete(dir: dest)
    ant.unzip(src: "$archivePath", dest: dest)

    archivePath.delete()

    ant.jar(destfile: "${archivePath}", manifest: "$dest/META-INF/MANIFEST.MF") {
      fileset(dir: dest) {
        exclude(name: "META-INF/")
        exclude(name: "LICENSE")
      }
    }
    ant.delete(dir: dest)
  }
}

artifacts {
  archives jar, war, standalone
}

uploadArchives {
  def ssl = new SSL()
  
  repositories.mavenDeployer {
    name = 'dev.mapfish.org deployer'
    configuration = configurations.deployerJars
    
    logger.debug("Using ${ssl.privateKey()} for privateKey file")
    logger.debug("Using ${ssl.passphrase()} for privateKey passphrase")

    repository(url: "scp://dev.mapfish.org/var/www/dev.mapfish.org/htdocs/maven/site/print") {
      authentication( userName: "admin", privateKey: ssl.privateKey(), passphrase: ssl.passphrase())
    }
    snapshotRepository(url: "scp://dev.mapfish.org/var/www/dev.mapfish.org/htdocs/maven/site/print")  {
      authentication( userName: "admin", privateKey: ssl.privateKey(), passphrase: ssl.passphrase())
    }
    
    addFilter('lib') { artifact, file ->
      artifact.name.contains 'print-lib'
    }
    addFilter('standalone') { artifact, file ->
      artifact.name.contains 'print-standalone'
    }
    addFilter('war') { artifact, file ->
      artifact.name.contains 'print-servlet'
    }
  }
}
def prop(key) {
  return System.getProperty(key) == null ? null : "--${key}=${System.getProperty(key)}"
}

task run(dependesOn: compileJava) << {
  String warning = """[WARNING] config parameter is required. 
  
  Usage:
    gradle run -Dconfig={value} [-Dspec={value}] [-Dverbose={value}] [-Doutput={value}] [-DclientConfig] [-Dreferer={value}] [-Dlog4jConfig={value}]
  Params:
    -Dconfig={String}: Filename for the configuration (templates&CO)
    -Dspec={String}: The location of the description of what has to be printed. By default, STDIN (defaults to [null])
    -Dverbose={int}: Used only if log4jConfig is not specified. 3 if you want everything, 2 if you want the debug information (stacktraces are shown), 1 for infos and 0 for only warnings and errors (defaults to [1])
    -Doutput={String}: The destination file. By default, STDOUT (defaults to [null])
    -DclientConfig={on|off}: Get the config for the client form. Doesn't generate a PDF (defaults to [off])
    -Dreferer={String}: Referer address to use when doing queries (defaults to [null])
    -Dlog4jConfig={String}: Property file for the log4j configuration (defaults to [null])
    
  Example:
    gradle run -Dconfig=samples/config.yaml -Dspec=samples/spec.json -Doutput=/tmp/print-out.pdf
    
    
  """

  args = [prop("config"),prop("spec"),prop("output"),prop("verbose"),prop("clientConfig"),prop("referer"),prop("log4jConfig")]
  if(prop("config") == null) {
    println(warning)
  } else {  
    ant.java(classname: 'org.mapfish.print.ShellMapPrinter', fork: false, logError: false,
             classpath: "${sourceSets.main.runtimeClasspath.asPath}")  {
        for(a in args.findAll {it!=null}){
          arg(value: a)
        }
     }
   }
}

task wrapper(type: Wrapper) { 
  gradleVersion = '0.8'
  jarPath = 'wrapper'
}
/*
This task is not ready for prime time.  I do not know what parameters the class expects

task runWarTest(dependsOn: jettyRunWar) << {
  description = "run load test on embedded jetty"
  try {
    
    testServer = System.properties('testServer') :? 
    def constructor
    ant.java(
      classname: 'integration.HeavyLoad', fork:false,
      classpath: "${configurations.testCompile.asPath}") 
      {
        arg(value: "http://localhost:$httpPort/print")
        arg(value: "samples/spec.json")
      }
  } finally {
    jettyStop.execute()
  }
}*/

